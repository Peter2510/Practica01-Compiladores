
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.peter.practica01.leerarchivo;

import com.peter.practica01.leerarchivo.Lexico;
import com.peter.practica01.manejoerrores.ManejoError;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\003\007" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\004\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\004\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\024\006\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\022\005\000\002\022\004\000\002\005" +
    "\003\000\002\005\005\000\002\005\004\000\002\006\010" +
    "\000\002\007\010\000\002\026\003\000\002\026\005\000" +
    "\002\012\010\000\002\016\005\000\002\016\007\000\002" +
    "\017\005\000\002\025\004\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\025\003\000\002\025\005\000\002\025\004\000" +
    "\002\020\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\020" +
    "\005\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\006\003\004\006\005\001\002\000\006\003" +
    "\004\006\005\001\002\000\004\012\013\001\002\000\004" +
    "\002\012\001\002\000\004\002\uffff\001\002\000\010\002" +
    "\001\003\004\006\005\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\000\001\002\000\004\010\014\001\002\000" +
    "\014\003\024\014\017\015\021\016\020\021\025\001\002" +
    "\000\012\003\275\014\017\015\021\021\025\001\002\000" +
    "\012\003\255\014\017\016\020\021\025\001\002\000\004" +
    "\046\252\001\002\000\004\046\221\001\002\000\004\046" +
    "\132\001\002\000\012\003\110\015\021\016\020\021\025" +
    "\001\002\000\012\003\066\014\017\015\021\016\020\001" +
    "\002\000\014\003\024\014\017\015\021\016\020\021\025" +
    "\001\002\000\004\046\030\001\002\000\004\011\027\001" +
    "\002\000\010\002\ufffc\003\ufffc\006\ufffc\001\002\000\004" +
    "\005\031\001\002\000\004\010\033\001\002\000\004\004" +
    "\063\001\002\000\012\003\035\031\037\037\036\042\041" +
    "\001\002\000\014\027\061\036\047\037\051\040\052\041" +
    "\046\001\002\000\012\003\035\031\037\037\036\042\041" +
    "\001\002\000\012\003\035\031\037\037\036\042\041\001" +
    "\002\000\012\003\035\031\037\037\036\042\041\001\002" +
    "\000\004\011\042\001\002\000\020\011\uff98\027\uff98\032" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\001\002\000\006" +
    "\004\uffa9\027\043\001\002\000\004\010\033\001\002\000" +
    "\004\004\uffa8\001\002\000\014\032\050\036\047\037\051" +
    "\040\052\041\046\001\002\000\012\003\035\031\037\037" +
    "\036\042\041\001\002\000\012\003\035\031\037\037\036" +
    "\042\041\001\002\000\020\011\uff97\027\uff97\032\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\001\002\000\012\003\035" +
    "\031\037\037\036\042\041\001\002\000\012\003\035\031" +
    "\037\037\036\042\041\001\002\000\020\011\uff99\027\uff99" +
    "\032\uff99\036\uff99\037\uff99\040\uff99\041\uff99\001\002\000" +
    "\020\011\uff9b\027\uff9b\032\uff9b\036\uff9b\037\uff9b\040\052" +
    "\041\046\001\002\000\020\011\uff9c\027\uff9c\032\uff9c\036" +
    "\uff9c\037\uff9c\040\052\041\046\001\002\000\020\011\uff9a" +
    "\027\uff9a\032\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\001" +
    "\002\000\020\011\uff9d\027\uff9d\032\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\001\002\000\020\011\uff96\027\uff96\032" +
    "\uff96\036\047\037\051\040\052\041\046\001\002\000\012" +
    "\003\035\031\037\037\036\042\041\001\002\000\014\011" +
    "\uffa7\036\047\037\051\040\052\041\046\001\002\000\004" +
    "\026\064\001\002\000\022\003\uffaa\004\uffaa\011\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\026\uffaa\027\uffaa\001\002\000\012" +
    "\004\ufff7\011\ufff7\026\ufff7\027\ufff7\001\002\000\012\003" +
    "\066\014\017\015\021\016\020\001\002\000\012\004\ufff8" +
    "\011\ufff8\026\ufff8\027\ufff8\001\002\000\006\015\021\016" +
    "\020\001\002\000\006\014\017\015\021\001\002\000\006" +
    "\014\017\016\020\001\002\000\004\016\020\001\002\000" +
    "\004\014\017\001\002\000\012\004\uffe2\011\uffe2\026\uffe2" +
    "\027\uffe2\001\002\000\012\004\uffe1\011\uffe1\026\uffe1\027" +
    "\uffe1\001\002\000\004\015\021\001\002\000\004\014\017" +
    "\001\002\000\012\004\uffde\011\uffde\026\uffde\027\uffde\001" +
    "\002\000\012\004\uffdd\011\uffdd\026\uffdd\027\uffdd\001\002" +
    "\000\004\015\021\001\002\000\004\016\020\001\002\000" +
    "\012\004\uffe0\011\uffe0\026\uffe0\027\uffe0\001\002\000\012" +
    "\004\uffdf\011\uffdf\026\uffdf\027\uffdf\001\002\000\012\004" +
    "\uffdc\011\uffdc\026\uffdc\027\uffdc\001\002\000\012\003\110" +
    "\015\021\016\020\021\025\001\002\000\012\004\ufff9\011" +
    "\ufff9\026\ufff9\027\ufff9\001\002\000\006\015\021\016\020" +
    "\001\002\000\006\015\021\021\025\001\002\000\006\016" +
    "\020\021\025\001\002\000\004\016\020\001\002\000\004" +
    "\021\025\001\002\000\012\004\uffe9\011\uffe9\026\uffe9\027" +
    "\uffe9\001\002\000\012\004\uffe8\011\uffe8\026\uffe8\027\uffe8" +
    "\001\002\000\004\015\021\001\002\000\004\021\025\001" +
    "\002\000\012\004\uffe7\011\uffe7\026\uffe7\027\uffe7\001\002" +
    "\000\012\004\uffe6\011\uffe6\026\uffe6\027\uffe6\001\002\000" +
    "\004\015\021\001\002\000\004\016\020\001\002\000\012" +
    "\004\uffe5\011\uffe5\026\uffe5\027\uffe5\001\002\000\012\004" +
    "\uffe4\011\uffe4\026\uffe4\027\uffe4\001\002\000\012\004\uffe3" +
    "\011\uffe3\026\uffe3\027\uffe3\001\002\000\004\005\133\001" +
    "\002\000\006\003\136\030\135\001\002\000\006\004\uffb1" +
    "\027\uffb1\001\002\000\104\003\177\004\155\005\204\006" +
    "\171\010\170\011\211\012\164\013\172\014\207\015\202" +
    "\016\201\017\156\020\163\021\205\022\162\023\167\024" +
    "\174\025\157\026\200\027\166\031\165\032\160\033\161" +
    "\034\175\036\210\037\147\040\154\041\150\042\203\043" +
    "\153\044\173\045\176\046\152\001\002\000\016\003\024" +
    "\014\017\015\021\016\020\021\025\026\146\001\002\000" +
    "\006\004\141\027\140\001\002\000\006\003\144\030\135" +
    "\001\002\000\004\026\142\001\002\000\022\003\uffae\004" +
    "\uffae\011\uffae\014\uffae\016\uffae\021\uffae\026\uffae\027\uffae" +
    "\001\002\000\006\004\uffb0\027\uffb0\001\002\000\014\003" +
    "\024\014\017\015\021\016\020\021\025\001\002\000\010" +
    "\004\uffb2\026\uffb2\027\uffb2\001\002\000\006\004\uffaf\027" +
    "\uffaf\001\002\000\106\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\001\002\000\106\003" +
    "\uffb9\004\uffb9\005\uffb9\006\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\001\002\000\106\003\177\004\155\005\204\006" +
    "\171\010\170\011\211\012\164\013\172\014\207\015\202" +
    "\016\201\017\156\020\163\021\205\022\162\023\167\024" +
    "\174\025\157\026\200\027\166\030\uffd6\031\165\032\160" +
    "\033\161\034\175\036\210\037\147\040\154\041\150\042" +
    "\203\043\153\044\173\045\176\046\152\001\002\000\106" +
    "\003\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\001\002\000\106\003\177\004\155\005\204" +
    "\006\171\010\170\011\211\012\164\013\172\014\207\015" +
    "\202\016\201\017\156\020\163\021\205\022\162\023\167" +
    "\024\174\025\157\026\200\027\166\030\uffd8\031\165\032" +
    "\160\033\161\034\175\036\210\037\147\040\154\041\150" +
    "\042\203\043\153\044\173\045\176\046\152\001\002\000" +
    "\106\003\uffb8\004\uffb8\005\uffb8\006\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\001\002\000\106\003\uffce\004\uffce\005" +
    "\uffce\006\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\001\002" +
    "\000\106\003\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\001\002\000\106\003\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\001" +
    "\002\000\106\003\uffb6\004\uffb6\005\uffb6\006\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\001\002\000\106\003\uffb5\004" +
    "\uffb5\005\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\001\002\000\106\003\uffc1\004\uffc1\005\uffc1\006\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\001\002\000\106\003\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\001\002\000\106\003\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\001\002\000\106\003" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\001\002\000\106\003\uffbc\004\uffbc\005\uffbc\006" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\001\002\000\106" +
    "\003\uffc0\004\uffc0\005\uffc0\006\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\001\002\000\106\003\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\001\002\000" +
    "\106\003\uffcc\004\uffcc\005\uffcc\006\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\001\002\000\106\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\001\002" +
    "\000\106\003\177\004\155\005\204\006\171\010\170\011" +
    "\211\012\164\013\172\014\207\015\202\016\201\017\156" +
    "\020\163\021\205\022\162\023\167\024\174\025\157\026" +
    "\200\027\166\030\uffd7\031\165\032\160\033\161\034\175" +
    "\036\210\037\147\040\154\041\150\042\203\043\153\044" +
    "\173\045\176\046\152\001\002\000\106\003\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\001" +
    "\002\000\106\003\uffb4\004\uffb4\005\uffb4\006\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\001\002\000\106\003\177\004" +
    "\155\005\204\006\171\010\170\011\211\012\164\013\172" +
    "\014\207\015\202\016\201\017\156\020\163\021\205\022" +
    "\162\023\167\024\174\025\157\026\200\027\166\030\uffda" +
    "\031\165\032\160\033\161\034\175\036\210\037\147\040" +
    "\154\041\150\042\203\043\153\044\173\045\176\046\152" +
    "\001\002\000\104\003\177\004\155\005\204\006\171\010" +
    "\170\011\211\012\164\013\172\014\207\015\202\016\201" +
    "\017\156\020\163\021\205\022\162\023\167\024\174\025" +
    "\157\026\200\027\166\031\165\032\160\033\161\034\175" +
    "\036\210\037\147\040\154\041\150\042\203\043\153\044" +
    "\173\045\176\046\152\001\002\000\106\003\uffbd\004\uffbd" +
    "\005\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\001" +
    "\002\000\106\003\uffc5\004\uffc5\005\uffc5\006\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\001\002\000\106\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\001\002\000\106\003\177\004\155\005\204\006\171\010" +
    "\170\011\211\012\164\013\172\014\207\015\202\016\201" +
    "\017\156\020\163\021\205\022\162\023\167\024\174\025" +
    "\157\026\200\027\166\030\uffd9\031\165\032\160\033\161" +
    "\034\175\036\210\037\147\040\154\041\150\042\203\043" +
    "\153\044\173\045\176\046\152\001\002\000\106\003\uffcd" +
    "\004\uffcd\005\uffcd\006\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\001\002\000\106\003\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\004\030" +
    "\212\001\002\000\106\003\uffc7\004\uffc7\005\uffc7\006\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000\106\003" +
    "\uffbb\004\uffbb\005\uffbb\006\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\001\002\000\106\003\uffca\004\uffca\005\uffca\006" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\001\002\000\010" +
    "\004\uffb3\026\uffb3\027\uffb3\001\002\000\004\030\uffd2\001" +
    "\002\000\004\030\uffd0\001\002\000\004\030\uffd4\001\002" +
    "\000\004\030\uffd3\001\002\000\004\030\uffd1\001\002\000" +
    "\004\030\uffd5\001\002\000\004\005\222\001\002\000\014" +
    "\003\224\031\227\037\226\042\231\043\230\001\002\000" +
    "\006\004\247\027\246\001\002\000\014\003\224\031\227" +
    "\037\226\042\231\043\230\001\002\000\016\004\uffac\027" +
    "\uffac\036\234\037\237\040\236\041\233\001\002\000\014" +
    "\003\224\031\227\037\226\042\231\043\230\001\002\000" +
    "\014\003\224\031\227\037\226\042\231\043\230\001\002" +
    "\000\020\004\uffa0\027\uffa0\032\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\001\002\000\020\004\uffa1\027\uffa1\032\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\001\002\000\014\032" +
    "\235\036\234\037\237\040\236\041\233\001\002\000\014" +
    "\003\224\031\227\037\226\042\231\043\230\001\002\000" +
    "\014\003\224\031\227\037\226\042\231\043\230\001\002" +
    "\000\020\004\uff9f\027\uff9f\032\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\001\002\000\014\003\224\031\227\037\226" +
    "\042\231\043\230\001\002\000\014\003\224\031\227\037" +
    "\226\042\231\043\230\001\002\000\020\004\uffa4\027\uffa4" +
    "\032\uffa4\036\uffa4\037\uffa4\040\236\041\233\001\002\000" +
    "\020\004\uffa2\027\uffa2\032\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\001\002\000\020\004\uffa5\027\uffa5\032\uffa5\036" +
    "\uffa5\037\uffa5\040\236\041\233\001\002\000\020\004\uffa3" +
    "\027\uffa3\032\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\001" +
    "\002\000\020\004\uffa6\027\uffa6\032\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\001\002\000\020\004\uff9e\027\uff9e\032" +
    "\uff9e\036\234\037\237\040\236\041\233\001\002\000\014" +
    "\003\224\031\227\037\226\042\231\043\230\001\002\000" +
    "\004\026\250\001\002\000\022\003\uffad\004\uffad\011\uffad" +
    "\014\uffad\015\uffad\021\uffad\026\uffad\027\uffad\001\002\000" +
    "\016\004\uffab\027\uffab\036\234\037\237\040\236\041\233" +
    "\001\002\000\006\003\144\030\135\001\002\000\004\026" +
    "\254\001\002\000\022\003\uffdb\004\uffdb\011\uffdb\015\uffdb" +
    "\016\uffdb\021\uffdb\026\uffdb\027\uffdb\001\002\000\012\003" +
    "\255\014\017\016\020\021\025\001\002\000\004\016\020" +
    "\001\002\000\006\016\020\021\025\001\002\000\006\014" +
    "\017\021\025\001\002\000\012\004\ufffb\011\ufffb\026\ufffb" +
    "\027\ufffb\001\002\000\004\021\025\001\002\000\004\014" +
    "\017\001\002\000\012\004\ufff5\011\ufff5\026\ufff5\027\ufff5" +
    "\001\002\000\012\004\ufff6\011\ufff6\026\ufff6\027\ufff6\001" +
    "\002\000\004\016\020\001\002\000\004\021\025\001\002" +
    "\000\012\004\ufff4\011\ufff4\026\ufff4\027\ufff4\001\002\000" +
    "\012\004\ufff3\011\ufff3\026\ufff3\027\ufff3\001\002\000\004" +
    "\014\017\001\002\000\012\004\ufff2\011\ufff2\026\ufff2\027" +
    "\ufff2\001\002\000\012\004\ufff1\011\ufff1\026\ufff1\027\ufff1" +
    "\001\002\000\012\003\275\014\017\015\021\021\025\001" +
    "\002\000\006\014\017\015\021\001\002\000\006\015\021" +
    "\021\025\001\002\000\012\004\ufffa\011\ufffa\026\ufffa\027" +
    "\ufffa\001\002\000\006\014\017\021\025\001\002\000\004" +
    "\021\025\001\002\000\004\014\017\001\002\000\012\004" +
    "\uffef\011\uffef\026\uffef\027\uffef\001\002\000\012\004\ufff0" +
    "\011\ufff0\026\ufff0\027\ufff0\001\002\000\004\015\021\001" +
    "\002\000\004\021\025\001\002\000\012\004\uffee\011\uffee" +
    "\026\uffee\027\uffee\001\002\000\012\004\uffed\011\uffed\026" +
    "\uffed\027\uffed\001\002\000\004\015\021\001\002\000\004" +
    "\014\017\001\002\000\012\004\uffec\011\uffec\026\uffec\027" +
    "\uffec\001\002\000\012\004\uffeb\011\uffeb\026\uffeb\027\uffeb" +
    "\001\002\000\012\004\uffea\011\uffea\026\uffea\027\uffea\001" +
    "\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\010\002\005\003\007\004\006\001\001\000" +
    "\010\002\316\003\007\004\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\010\003" +
    "\007\004\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\015\007\014\010\025\012" +
    "\022\024\021\001\001\000\012\006\300\012\275\013\277" +
    "\024\276\001\001\000\012\007\257\011\260\012\255\024" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\113\007\112\012\111\014\110\001" +
    "\001\000\012\006\071\007\070\015\066\024\067\001\001" +
    "\000\014\006\015\007\014\010\064\012\022\024\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\031\001\001\000\002\001" +
    "\001\000\006\017\037\020\033\001\001\000\002\001\001" +
    "\000\004\020\057\001\001\000\004\020\056\001\001\000" +
    "\004\020\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\055\001\001\000\004" +
    "\020\054\001\001\000\002\001\001\000\004\020\053\001" +
    "\001\000\004\020\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\071\007\070\015\106\024\067\001\001" +
    "\000\002\001\001\000\006\006\103\007\102\001\001\000" +
    "\006\006\077\024\076\001\001\000\006\007\073\024\072" +
    "\001\001\000\004\007\075\001\001\000\004\024\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\101" +
    "\001\001\000\004\024\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\105\001\001\000\004\007\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\113\007\112\012\111\014\130\001\001" +
    "\000\002\001\001\000\006\006\125\007\124\001\001\000" +
    "\006\006\121\012\120\001\001\000\006\007\115\012\114" +
    "\001\001\000\004\007\117\001\001\000\004\012\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\123" +
    "\001\001\000\004\012\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\127\001\001\000\004\007\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\136\022\133\001\001" +
    "\000\002\001\001\000\006\021\205\023\150\001\001\000" +
    "\014\006\015\007\014\010\144\012\022\024\021\001\001" +
    "\000\002\001\001\000\004\022\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\015" +
    "\007\014\010\144\012\022\024\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\217\023\150\001\001\000\002\001\001\000" +
    "\006\021\216\023\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\215\023\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\214\023\150\001\001" +
    "\000\006\021\213\023\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\212\023\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\224\026\222\001" +
    "\001\000\002\001\001\000\004\025\244\001\001\000\002" +
    "\001\001\000\004\025\243\001\001\000\004\025\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\242\001\001\000\004\025\241\001\001\000" +
    "\002\001\001\000\004\025\240\001\001\000\004\025\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\257\011\273\012" +
    "\255\024\256\001\001\000\004\007\271\001\001\000\006" +
    "\007\266\012\265\001\001\000\006\012\262\024\261\001" +
    "\001\000\002\001\001\000\004\012\264\001\001\000\004" +
    "\024\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\270\001\001\000\004\012\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\300\012\275" +
    "\013\315\024\276\001\001\000\006\006\312\024\311\001" +
    "\001\000\006\006\306\012\305\001\001\000\002\001\001" +
    "\000\006\012\302\024\301\001\001\000\004\012\304\001" +
    "\001\000\004\024\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\310\001\001\000\004\012\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\314" +
    "\001\001\000\004\024\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    
    Datos datos = new Datos();
    ManejoError manejarError = new ManejoError();
    

    public Sintactico(Lexico lexer) {
        super(lexer);
    }

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
        manejarError.agregarError((String)s.value,s.left+"",s.right+"","Sintactico","");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    /* public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    } */

    public void unrecovered_syntax_error(Symbol s) throws Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.");
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= estructura_barras 
            {
              Object RESULT =null;
		 System.out.println("RECONOZCO LA DEFINCION DE BARRAS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",0, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= estructura_pie 
            {
              Object RESULT =null;
		 System.out.println("Estructura Pie xd");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",0, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= estructura_barras s 
            {
              Object RESULT =null;
		 System.out.println("Buscando otra estructura"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",0, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= error s 
            {
              Object RESULT =null;
		 System.out.println("Error, buscando otra estrucura"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",0, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura_barras ::= DEF BARRAS LLAVEABIERTA opciones_barras LLAVECERRADA 
            {
              Object RESULT =null;
		 System.out.println("ESTRUCTURA BARRAS FUNCIONANDO"); datos.cambiarContador(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_barras",1, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones_barras ::= estructura_ejex opcion_sin_ejex 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_barras",6, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones_barras ::= estructura_ejey opcion_sin_ejey 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_barras",6, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones_barras ::= estructura_titulo opcion_sin_titulo 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_barras",6, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opciones_barras ::= estructura_unir opcion_sin_unir 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_barras",6, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opciones_barras ::= error opciones_barras 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_barras",6, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opcion_sin_ejex ::= estructura_ejey estructura_titulo estructura_unir 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejex",7, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opcion_sin_ejex ::= estructura_ejey estructura_unir estructura_titulo 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejex",7, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opcion_sin_ejex ::= estructura_titulo estructura_ejey estructura_unir 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejex",7, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opcion_sin_ejex ::= estructura_titulo estructura_unir estructura_ejey 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejex",7, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opcion_sin_ejex ::= estructura_unir estructura_ejey estructura_titulo 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejex",7, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opcion_sin_ejex ::= error opcion_sin_ejex 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejex",7, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opcion_sin_ejey ::= estructura_ejex estructura_titulo estructura_unir 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejey",9, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opcion_sin_ejey ::= estructura_ejex estructura_unir estructura_titulo 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejey",9, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opcion_sin_ejey ::= estructura_titulo estructura_ejex estructura_unir 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejey",9, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opcion_sin_ejey ::= estructura_titulo estructura_unir estructura_ejex 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejey",9, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opcion_sin_ejey ::= estructura_unir estructura_ejex estructura_titulo 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejey",9, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opcion_sin_ejey ::= estructura_unir estructura_titulo estructura_ejex 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejey",9, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opcion_sin_ejey ::= error opcion_sin_ejey 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_ejey",9, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opcion_sin_titulo ::= estructura_ejex estructura_ejey estructura_unir 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_titulo",10, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opcion_sin_titulo ::= estructura_ejex estructura_unir estructura_ejey 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_titulo",10, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opcion_sin_titulo ::= estructura_ejey estructura_ejex estructura_unir 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_titulo",10, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opcion_sin_titulo ::= estructura_ejey estructura_unir estructura_ejex 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_titulo",10, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opcion_sin_titulo ::= estructura_unir estructura_ejex estructura_ejey 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_titulo",10, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opcion_sin_titulo ::= estructura_unir estructura_ejey estructura_ejex 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_titulo",10, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opcion_sin_titulo ::= error opcion_sin_titulo 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_titulo",10, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opcion_sin_unir ::= estructura_ejex estructura_ejey estructura_titulo 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_unir",11, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opcion_sin_unir ::= estructura_ejex estructura_titulo estructura_ejey 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_unir",11, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opcion_sin_unir ::= estructura_titulo estructura_ejex estructura_ejey 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_unir",11, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opcion_sin_unir ::= estructura_titulo estructura_ejey estructura_ejex 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_unir",11, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opcion_sin_unir ::= estructura_ejey estructura_ejex estructura_titulo 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_unir",11, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opcion_sin_unir ::= estructura_ejey estructura_titulo estructura_ejex 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_unir",11, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opcion_sin_unir ::= error opcion_sin_unir 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opcion_sin_unir",11, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estructura_titulo ::= TITULO DOSPUNTOS cadena PUNTOCOMA 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String titulo = (String)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                System.out.println("**TITULO**: " + titulo); 
                                                                /* agrego titlos*/  datos.addTitulo(titulo);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_titulo",18, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opciones_titulo ::= TEXTO 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String titulo = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + ""; /* System.out.println("TEXTO"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opciones_titulo ::= ENTERO 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer titulo = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + ""; /*System.out.println("ENTERO"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opciones_titulo ::= DECIMAL 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double titulo = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + ""; /*System.out.println("DECIMAL"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opciones_titulo ::= SIMBOLO 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String titulo = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + ""; /*System.out.println("SIMBOLO");*/
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opciones_titulo ::= simbolos 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String titulo = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + ""; /*System.out.println("simbolo reservado");*/
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opciones_titulo ::= simbolos opciones_titulo 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String titulo = (String)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int titulo2left = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int titulo2right = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String titulo2 = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + " " + titulo2;/* System.out.println("DOBLE"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opciones_titulo ::= TEXTO opciones_titulo 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String titulo = (String)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int titulo2left = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int titulo2right = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String titulo2 = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + " " + titulo2;/* System.out.println("DOBLE"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opciones_titulo ::= SIMBOLO opciones_titulo 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String titulo = (String)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int titulo2left = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int titulo2right = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String titulo2 = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + " " + titulo2 ; /*System.out.println("DOBLE"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opciones_titulo ::= ENTERO opciones_titulo 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer titulo = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int titulo2left = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int titulo2right = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String titulo2 = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + " " + titulo2; /*System.out.println("DOBLE"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opciones_titulo ::= DECIMAL opciones_titulo 
            {
              String RESULT =null;
		int tituloleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tituloright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Double titulo = (Double)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int titulo2left = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int titulo2right = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String titulo2 = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = titulo + " " + titulo2;/* System.out.println("DOBLE"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opciones_titulo ::= error opciones_titulo 
            {
              String RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_titulo",15, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simbolos ::= DOSPUNTOS 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simbolos ::= CORCHETECERRADO 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simbolos ::= CORCHETEABIERTO 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simbolos ::= DEF 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simbolos ::= LLAVEABIERTA 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simbolos ::= LLAVECERRADA 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simbolos ::= BARRAS 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simbolos ::= PIE 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simbolos ::= TITULO 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simbolos ::= EJEX 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simbolos ::= EJEY 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simbolos ::= ETIQUETAS 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simbolos ::= VALORES 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simbolos ::= UNIR 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simbolos ::= TIPO 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simbolos ::= TOTAL 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simbolos ::= EXTRA 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simbolos ::= EJECUTAR 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simbolos ::= PUNTOCOMA 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simbolos ::= COMA 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simbolos ::= MAS 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simbolos ::= MENOS 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simbolos ::= MULTIPLICACION 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simbolos ::= DIVISION 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simbolos ::= PARENTESISABIERTO 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simbolos ::= PARENTESISCERRADO 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simbolos ::= PORCENTAJE 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simbolos ::= CANTIDAD 
            {
              String RESULT =null;
		int textoleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int textoright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String texto = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = texto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",17, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cadena ::= COMILLADOBLE opciones_titulo COMILLADOBLE 
            {
              String RESULT =null;
		int halladoleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int halladoright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String hallado = (String)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= hallado; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cadena",16, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cadena ::= error opciones_barras 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cadena",16, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista_cadena ::= cadena 
            {
              Object RESULT =null;
		int cadena1left = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int cadena1right = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena1 = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=cadena1;
                                        
                                        System.out.println("Cadena leida: " + cadena1); 
                                        datos.addEjex(cadena1); 
                                        System.out.println("agrego lista cadena ");

                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_cadena",3, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_cadena ::= lista_cadena COMA cadena 
            {
              Object RESULT =null;
		int cadena3left = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int cadena3right = ((Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena3 = (String)((Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                        RESULT= cadena3;
                                                        System.out.println("Cadena leida: " + cadena3);
                                                        System.out.println("agrego lista cadena coma cadena"); 
                                                        datos.addEjex(cadena3); 
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_cadena",3, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lista_cadena ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_cadena",3, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // estructura_ejex ::= EJEX DOSPUNTOS CORCHETEABIERTO lista_cadena CORCHETECERRADO PUNTOCOMA 
            {
              Object RESULT =null;
		/*System.out.println("ESTRUCTRURA EJEX"); */
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_ejex",4, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // estructura_ejey ::= EJEY DOSPUNTOS CORCHETEABIERTO opciones_lista CORCHETECERRADO PUNTOCOMA 
            {
              Object RESULT =null;
		/*_-*/ 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_ejey",5, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // opciones_lista ::= lista_numeros 
            {
              Double RESULT =null;
		int operacionleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int operacionright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double operacion = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                        RESULT=operacion; System.out.println("Operacion hallada: " + operacion); 
                                                        datos.addEjey(operacion);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_lista",20, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // opciones_lista ::= opciones_lista COMA lista_numeros 
            {
              Double RESULT =null;
		int operacionleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int operacionright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double operacion = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                    RESULT=operacion; 
                                                                    System.out.println("Operacion hallada: " + operacion); 
                                                                    datos.addEjey(operacion);
                                                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_lista",20, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // estructura_unir ::= UNIR DOSPUNTOS CORCHETEABIERTO estructura_opciones_unir CORCHETECERRADO PUNTOCOMA 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_unir",8, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // estructura_opciones_unir ::= LLAVEABIERTA opciones_lista_entero LLAVECERRADA 
            {
              Integer RESULT =null;
		int operacionleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int operacionright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer operacion = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_opciones_unir",12, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // estructura_opciones_unir ::= LLAVEABIERTA opciones_lista_entero LLAVECERRADA COMA estructura_opciones_unir 
            {
              Integer RESULT =null;
		int operacionleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int operacionright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer operacion = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura_opciones_unir",12, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opciones_lista_entero ::= lista_numeros_enteros COMA lista_numeros_enteros 
            {
              Integer RESULT =null;
		int operacion1left = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int operacion1right = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer operacion1 = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int operacion2left = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int operacion2right = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer operacion2 = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                    RESULT=operacion1; 
                                                                                    System.out.println("Numero 1 : " + operacion1);
                                                                                    System.out.println("Numero 2 : " + operacion2);
                                                                                    datos.unir(operacion1,operacion2);

                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones_lista_entero",13, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lista_numeros ::= MENOS lista_numeros 
            {
              Double RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double a = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*-1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lista_numeros ::= lista_numeros MAS lista_numeros 
            {
              Double RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lista_numeros ::= lista_numeros MENOS lista_numeros 
            {
              Double RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a-b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_numeros ::= lista_numeros MULTIPLICACION lista_numeros 
            {
              Double RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_numeros ::= lista_numeros DIVISION lista_numeros 
            {
              Double RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a/b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_numeros ::= ENTERO 
            {
              Double RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer a = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Double(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_numeros ::= DECIMAL 
            {
              Double RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Double a = (Double)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Double(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_numeros ::= PARENTESISABIERTO lista_numeros PARENTESISCERRADO 
            {
              Double RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Double a = (Double)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_numeros ::= error lista_numeros 
            {
              Double RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",19, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_numeros_enteros ::= MENOS lista_numeros_enteros 
            {
              Integer RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer a = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*-1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros_enteros",14, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_numeros_enteros ::= lista_numeros_enteros MAS lista_numeros_enteros 
            {
              Integer RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros_enteros",14, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_numeros_enteros ::= lista_numeros_enteros MENOS lista_numeros_enteros 
            {
              Integer RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a-b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros_enteros",14, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_numeros_enteros ::= lista_numeros_enteros MULTIPLICACION lista_numeros_enteros 
            {
              Integer RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros_enteros",14, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_numeros_enteros ::= lista_numeros_enteros DIVISION lista_numeros_enteros 
            {
              Integer RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a/b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros_enteros",14, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_numeros_enteros ::= ENTERO 
            {
              Integer RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((Symbol)CUP$Sintactico$stack.peek()).right;
		Integer a = (Integer)((Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros_enteros",14, ((Symbol)CUP$Sintactico$stack.peek()), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_numeros_enteros ::= PARENTESISABIERTO lista_numeros_enteros PARENTESISCERRADO 
            {
              Integer RESULT =null;
		int aleft = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer a = (Integer)((Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros_enteros",14, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_numeros_enteros ::= error lista_numeros_enteros 
            {
              Integer RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros_enteros",14, ((Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
